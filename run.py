from aiogram import Bot, Dispatcher, F
import asyncio
import logging

from sqlalchemy.exc import IntegrityError

from config import TOKEN, BLACK_LIST, ADMIN_ID
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
import keyboards as kb
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import requests as rq
from models import async_main

bot = Bot(token=TOKEN)
dp = Dispatcher()


class Getnews(StatesGroup):
    caption = State()
    photo = State()
    id = State()
    username = State()
    mention = State()


@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(text="–ü—Ä–∏–≤–µ—Ç! —ç—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π")
    await message.answer(text="‚ÄºÔ∏è–°–æ–≤–µ—Ç—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–¥–∞—á–∏ –Ω–æ–≤–æ—Å—Ç–µ–π‚ÄºÔ∏è", reply_markup=kb.main)
    try:
        await rq.add_user(user_id=message.from_user.id, name=message.from_user.first_name,
                      username=message.from_user.username)
    except IntegrityError:
        await rq.add_user(user_id=message.from_user.id, name=message.from_user.first_name, username="None")


@dp.message(F.text == "–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–¥–∞—á–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
async def news1(message: Message):
    global pin
    await message.answer(text='1. –ú—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ: –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –æ—Å–∫—Ä–æ–±–ª–µ–Ω–∏—è, 18+, '
                                    '–∏–∑–¥–µ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ—Å—Ç—ã.\n\n2. –ü—Ä–∏–Ω–∏–º–∞–µ–º: –≤—Å–µ, –∫—Ä–æ–º–µ –≤—ã—à–µ —É–ø–æ–º—è–Ω—É—Ç—ã—Ö, –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å '
                                    '–¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –∏ —Ç–¥.\n\n3. –ö –≤–∞—à–∏–º –Ω–æ–≤–æ—Å—Ç—è–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–µ–∫—Ä–µ–ø–ª–µ–Ω–∞ –º–∏–Ω–∏–º—É–º 1 '
                                    '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, —Å–¥–µ–ª–∞–Ω–Ω–∞—è –≤–∞–º–∏ –∏–ª–∏ –≤–∞—à–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏.\n\n4. –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Å–∞–º—É '
                                    '–Ω–æ–≤–æ—Å—Ç—å –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, —Ç–∞–∫ –∫–∞–∫ –≤ –±—É–¥—É—â–µ–º –æ–Ω–∞ –ø–æ–ø–∞–¥–µ—Ç –∞–¥–º–∏–Ω–∞–º, –ø–æ—Å–ª–µ —á–µ–≥–æ –µ—ë '
                                    '–æ—Ñ–æ—Ä–º—è—Ç –∏ –≤—ã—Å—Ç–∞–≤—è—Ç –≤ –∫–∞–Ω–∞–ª.\n\nP.S.\n—á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '
                                    '"–ü–æ–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å" –∏ —Å–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º –±–æ—Ç–∞')


@dp.message(F.text == "–ü–æ–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
async def news1(message: Message, state: FSMContext):
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–µ–≥–æ", reply_markup=kb.main_meny)
    await state.set_state(Getnews.caption)


@dp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ªa–≤–Ω–æ–µ –ºe–Ω—é")
async def news1(message: Message, state: FSMContext):
    await message.answer(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main)
    await state.clear()


@dp.message(Getnews.caption)
async def news2(message: Message, state: FSMContext):
    await state.update_data(id=message.from_user.id, username=message.from_user.username)
    if message.photo:
        len_caption = message.caption
        if len(message.caption) > 1024:
            await message.answer(text=f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–∏–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—åüò∂ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 1024 —Å–∏–º–≤–æ–ª–∞ (–≤—ã –≤–≤–µ–ª–∏ "
                                      f"{len_caption}, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å –≤ –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–æ–π —Ñ–æ—Ä–º–µ –∏–ª–∏ "
                                      f"–≤—ã–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)", reply_markup=kb.main_meny)
        else:
            await state.update_data(caption=message.caption)
            await state.update_data(photo=message.photo[-1].file_id)
            await message.answer("—Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –≤–∞—Å –æ—Ç–º–µ—Ç–∏–ª–∏ –≤ –Ω–æ–≤–æ—Å—Ç–∏?", reply_markup=kb.last)

    elif message.text:
        len_text = message.text
        if len(message.text) > 1024:
            await message.answer(text=f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–∏–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—åüò∂ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 1024 —Å–∏–º–≤–æ–ª–∞ (–≤—ã –≤–≤–µ–ª–∏ "
                                      f"{len_text}, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å –≤ –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–æ–π —Ñ–æ—Ä–º–µ –∏–ª–∏ "
                                      f"–≤—ã–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)", reply_markup=kb.main_meny)
        else:
            await state.update_data(caption=message.text)
            await state.set_state(Getnews.photo)
            await message.answer("–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –º–µ—Å—Ç–∞ —Å–æ–±—ã—Ç–∏–π", reply_markup=kb.main_meny)


@dp.message(Getnews.photo)
async def news3(message: Message, state: FSMContext):
    if message.photo:
        await state.update_data(photo=message.photo[-1].file_id)
        await message.answer("—Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –≤–∞—Å –æ—Ç–º–µ—Ç–∏–ª–∏ –≤ –Ω–æ–≤–æ—Å—Ç–∏?", reply_markup=kb.last)

    else:
        await message.answer(text="–û—Ç–ø—Ä–∞–≤—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ!")


@dp.callback_query(F.data == "yes")
async def yes(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    await state.update_data(mention="–¥–∞")
    data_news = await state.get_data()
    await bot.send_photo(chat_id=ADMIN_ID, photo=data_news['photo'], caption=f"–≤–æ–ø—Ä–æ—Å: {data_news['caption']}"
                                                                             f"\nid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data_news['id']}"
                                                                             f"\nusername: {data_news['username']}"
                                                                             f"\n–æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–¥ –ø–æ—Å—Ç–æ–º: {data_news['mention']}")
    await callback.message.answer(text="–Ω–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                                  reply_markup=kb.main)
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)
    await bot.edit_message_text(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                text='—Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –≤–∞—Å –æ—Ç–º–µ—Ç–∏–ª–∏ –≤ –Ω–æ–≤–æ—Å—Ç–∏?\n\n (–≤—ã –≤—ã–±—Ä–∞–ª–∏ "–¥–∞")')
    await state.clear()


@dp.callback_query(F.data == "no")
async def yes(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    await state.update_data(mention="–Ω–µ—Ç")
    data_news = await state.get_data()
    await bot.send_photo(chat_id=ADMIN_ID, photo=data_news['photo'], caption=f"–≤–æ–ø—Ä–æ—Å: {data_news['caption']}"
                                                                             f"\nid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data_news['id']}"
                                                                             f"\nusername: {data_news['username']}"
                                                                             f"\n–æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–¥ –ø–æ—Å—Ç–æ–º: {data_news['mention']}")
    await callback.message.answer(text="–Ω–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                                  reply_markup=kb.main)
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)
    await bot.edit_message_text(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                text='—Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –≤–∞—Å –æ—Ç–º–µ—Ç–∏–ª–∏ –≤ –Ω–æ–≤–æ—Å—Ç–∏?\n\n (–≤—ã –≤—ã–±—Ä–∞–ª–∏ "–Ω–µ—Ç")')
    await state.clear()


# @dp.callback_query(F.data == "pin")
# async def nex(callback: CallbackQuery):
#     global pin
#     print(pin)
#     await callback.answer('')
#     await bot.pin_chat_message(chat_id=callback.message.from_user.id, message_id=pin)
#     await callback.message.answer("—Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ", reply_markup=kb.main)


async def main():
    await async_main()
    # dp.include_router(router=router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–≤—ã—Ö–æ–¥")
